{"version":3,"sources":["webpack:///./src/templates/tags.tsx"],"names":["Article","styled","article","PageTitle","h1","Excerpt","p","Tags","props","tag","pageContext","data","allMarkdownRemark","edges","tagHeader","totalCount","location","title","map","node","key","fields","slug","frontmatter","tags","date","url","readingTime","minutes","description","excerpt","pageQuery"],"mappings":"2FAAA,0HAsCMA,EAAUC,IAAOC,QAAV,mEAAGD,CAAH,wBAIPE,EAAYF,IAAOG,GAAV,qEAAGH,CAAH,mEAOTI,EAAUJ,IAAOK,EAAV,mEAAGL,CAAH,sBAmCEM,UA/Bf,SAAcC,GAAkB,IACtBC,EAAQD,EAAME,YAAdD,IADsB,EAEAD,EAAMG,KAAKC,kBAAjCC,EAFsB,EAEtBA,MACFC,EAAeL,EAAN,KAHe,EAEfM,WACA,IAEf,OACE,kBAAC,IAAD,CAAQC,SAAUR,EAAMQ,SAAUC,MAAOR,GACvC,oCACE,kBAAC,IAAD,CAAKQ,MAAK,qBAAuBR,IACjC,kBAACN,EAAD,KAAYW,GACXD,EAAMK,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACZ,OACE,kBAACnB,EAAD,CAASoB,IAAKD,EAAKE,OAAOC,MACxB,kBAAC,IAAD,CACEL,MAAOE,EAAKI,YAAYN,MACxBO,KAAML,EAAKI,YAAYC,KACvBC,KAAMN,EAAKI,YAAYE,KACvBC,IAAKP,EAAKE,OAAOC,KACjBK,YAAaR,EAAKE,OAAOM,YAAYC,UAEvC,iCACE,kBAACvB,EAAD,KAAUc,EAAKI,YAAYM,aAAeV,EAAKW,iBAYxD,IAAMC,EAAY","file":"component---src-templates-tags-tsx-fffd911e65a6d7710b47.js","sourcesContent":["import React from 'react';\nimport { graphql, PageRendererProps } from 'gatsby';\nimport styled from 'styled-components';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport PostHeader from '../components/PostHeader';\n\ninterface TagsProps extends PageRendererProps {\n  pageContext: {\n    tag: string;\n  };\n  data: {\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: [\n        {\n          node: {\n            excerpt: string;\n            frontmatter: {\n              title: string;\n              date: string;\n              tags: string[];\n              description: string;\n            };\n            fields: {\n              slug: string;\n              readingTime: {\n                minutes: number;\n              };\n            };\n          };\n        }\n      ];\n    };\n  };\n}\n\nconst Article = styled.article`\n  margin: 0 0 60px 0;\n`;\n\nconst PageTitle = styled.h1`\n  font-size: 22px;\n  background: #d73738;\n  display: inline;\n  padding: 5px;\n`;\n\nconst Excerpt = styled.p`\n  font-weight: 400;\n`;\n\nfunction Tags(props: TagsProps) {\n  const { tag } = props.pageContext;\n  const { edges, totalCount } = props.data.allMarkdownRemark;\n  const tagHeader = `${tag} (${totalCount})`;\n\n  return (\n    <Layout location={props.location} title={tag}>\n      <>\n        <SEO title={`Publicações sobre ${tag}`} />\n        <PageTitle>{tagHeader}</PageTitle>\n        {edges.map(({ node }) => {\n          return (\n            <Article key={node.fields.slug}>\n              <PostHeader\n                title={node.frontmatter.title}\n                tags={node.frontmatter.tags}\n                date={node.frontmatter.date}\n                url={node.fields.slug}\n                readingTime={node.fields.readingTime.minutes}\n              />\n              <section>\n                <Excerpt>{node.frontmatter.description || node.excerpt}</Excerpt>\n              </section>\n            </Article>\n          );\n        })}\n      </>\n    </Layout>\n  );\n}\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n            readingTime {\n              minutes\n            }\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}